<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
            default-lazy-init="true">

    <!-- This scan is only used to find the FortunesBean component. -->
    <context:component-scan base-package="com.prototype.user" />

    <!-- An InjectResourceFactory must be created.  It is ApplicationContextAware so
    must be instantiated via spring and then passed into rest.li -->
    <bean id="injectResourceFactory" class="com.linkedin.restli.server.spring.SpringInjectResourceFactory" />

    <!-- Example of how to add filters,  here we'll enable logging and snappy compression support -->
    <bean id="loggingFilter" class="com.linkedin.r2.filter.logging.SimpleLoggingFilter" />

    <bean id="compressionFilter" class="com.linkedin.r2.filter.compression.ServerCompressionFilter" >
        <constructor-arg value="snappy" />
    </bean>

    <bean id="filterChain" class="com.linkedin.r2.filter.FilterChains" factory-method="create">
        <constructor-arg>
            <list>
                <ref bean="loggingFilter"/>
                <ref bean="compressionFilter"/>
            </list>
        </constructor-arg>
    </bean>

    <!--
      In web.xml, HttpRequestHandlerServlet loads this "restliRequestHandler" spring bean as a servlet.  For details, see:
      http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/web/context/support/HttpRequestHandlerServlet.html
    -->
    <bean id="restliRequestHandler" class="com.linkedin.restli.server.spring.RestliHttpRequestHandler">
        <constructor-arg>
            <bean class="com.linkedin.restli.server.RestLiConfig">
                <property name="resourcePackageNames" value="com.prototype.user.impl" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="injectResourceFactory" />
        <constructor-arg ref="filterChain" />
    </bean>

    <!--
        SECURITY FILTERS
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                # some example chain definitions:
                /admin/** = authc, roles[admin]
                /docs/** = authc, perms[document:read]
                /login.jsp = authc
                /home.jsp = authc
                /** = anon
                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="textRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->

        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="textRealm" class="org.apache.shiro.realm.text.TextConfigurationRealm">
        <property name="userDefinitions">
            <value>
                <!--FORMAT

                    username = password, role1, role2,...

                    Here are some examples of what these lines might look like:

                    root = reallyHardToGuessPassword, administrator
                    jsmith = jsmithsPassword, manager, engineer, employee
                    abrown = abrownsPassword, qa, employee
                    djones = djonesPassword, qa, contractor
                    guest = guestPassword
                 -->
                user = user, user
                admin = admin, user, admin
            </value>
        </property>
    </bean>
    <!--FORMAT
        <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
            <property name="dataSource" ref="dataSource"/>
            <property name="authenticationQuery" value="SELECT password FROM User WHERE nip = ?"/>
            <property name="userRolesQuery" value="SELECT role FROM User WHERE nip = ?"/>
            <property name="permissionsLookupEnabled" value="true" />
            <property name="permissionsQuery" value="SELECT action FROM role_action WHERE role = ?"/>
        </bean>

        <bean id="dataSource" class="com.mysql.jdbc.jdbc2.optional.MysqlDataSource">
            <property name="serverName" value="localhost" />
            <property name="user" value="root" />
            <property name="password" value="" />
            <property name="databaseName" value="prototype_schema" />
        </bean>
        -->
    </beans>